# 函数的进阶（命名空间和作用域的问题）

###名字空间
#内置命名空间---python解释器（不能使用局部和全局的名字的）
"""
1就是python解释器一启动就可以用的名字在内置的命名空间中
print()
input()
list()
tuple()
2内置的名字在启动解释器的时候被加载进内存中
"""

#全局命名空间---我们写的代码但不是函数中的代码（可使用内置命名空间名字，不可用局部的命名空间名字）
"""
可使用内置命名空间名字，不可用局部的命名空间名字,why？
def func():
    a=1
func()  执行func时，到a=1时已经就把func执行完了，所以a就已消失在内存空间中了
print(a)
是在程序从上到下被执行的过程中依次被加载进内存的
放置了我们设置的所有变量名和函数名
"""

#局部命名空间---与函数有关系（可以使用全局命名空间和内置命名空间中的名字）
"""
就是函数内部定义的名字
在调用函数的时候才会产生这个名称空间，随着函数执行的结束，这个命名空间又消失了
"""


#三者关系（可往外扩散摄取，不能往内）（内置的（全局的（局部的名字空间）名字空间）名字空间），
#在正常情况下，直接使用内置的名字
#当我们在全局定义了和内置名字空间中同名的名字时，会使用全局的名字
#当我自己有的时候 我就不找我的上级要了
#如果自己没有 就找上一级要 上一级没有再找上一级 如果内置的名字空间都没有 就报错
# 多个函数应该拥有多个独立的局部名字空间，不互相共享
"""
#1
def func():
    print(input)

func()   #func+（）代表一个函数的执行，函数名func去掉括号指的是这个函数所在的内存地址
#2
print（func）就可以打印出函数func的地址
#3：打不出来，因为两个局部名字空间是平行的，不互相共享（全局和内置都只有一个，只有局部是多个）
def fun1():
    a=1

def fun2():
    print（a）
"""


###作用域
#了解作用域的概念
"""
#问题一
a = 1 #外面定义一个变量函数里面可以用，因为a属于全局作用域
def func():
    print(a)
func()  #调用函数

#问题二：为啥报错？？
def func():
    a=1 #函数里面定义一个变量函数外面不能用
func()
print(a)
"""


#全局作用域---作用在全局---内置和全局名字空间中的名字都属于全局作用域 globals（）
#局部作用域---作用在局部---函数 --locals（）查看

"""
#对于不可变数据类型，在局部可以查看全局作用域中的变量
#但是不可以直接修改
#要修改，需要在程序一开始就添加global声明
#如果在一个局部（函数）内声明了一个global变量，那么这个变量在局部的所有操作将对全局的变量有效
a=1
def func():
    global a

func() 
print(a)  #打印出结果2，若#掉妇女（）则打印出1
"""

"""
#
a=1
b=2  #先定义了ab在全局的名字空间
def func():  #紧接着又定义了一个func在全局名字空间里
    x='aaa' #在局部的命名空间里生成了xy
    y='bbb'
    print(locals()) #locals可查看局部名字空间里的所有名字

func()  #调用才执行

#查看全局作用域
print(globals()) #除了可以看见全局命名空间里头的，还能看见内置名字空间里头的东西
               #
print(locals())#因为把locals放在全局，他的本地就是全局。所以打印的东西和全局一样。
               #把locals放在局部，那打印出来的东西就是局部的。
#globals 永远打印全局的名字
#locals 输出什么 根据locals所在的位置


"""

